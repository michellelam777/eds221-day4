---
title: "EDS 221 Day 4 Comp"
author: "Michelle Lam"
format: html
editor: visual
---

```{r}
library(tidyverse)
```

### Intro to functions

Make a function to double the user input

```{r}
double_this <- function(my_value) {
  print(2 * my_value)
}

# can specify argument name or just use the order that they appear in your function
# recommended to specify argument name before value 
double_this(my_value = 200)
double_this(200)

# can use the function on a vector
double_this(c(1, 2, 10, 100, 175))

```

Your turn: Write a function that asks for a user's NAME and age, and returns an exclamation, like "I'm \[NAME\], and I am \[age\] years old."

```{r}
name_age_statement <- function(your_name, your_age) {
  print(paste("I'm", your_name, "and I am", your_age, "years old."))
}

name_age_statement(your_name = "Michelle", your_age = 27)
```

### Function with conditional

```{r}
convert_animal_age <- function(animal, human_age) {
  if (animal == "dog") {
    print(human_age * 7)
  } else if (animal == "goat") {
    print(human_age * 4.7)
  } else {
    print("Please enter dog or goat for animal.")
  }
}

convert_animal_age(animal = "dog", human_age = 12)
convert_animal_age(animal = "goat", human_age = 5)
convert_animal_age(animal = "pika", human_age = 2)
```

### Function pulling info from a data frame

```{r}
# Make a data frame
dog_choice <- tribble(
  ~dog_name, ~food,
  "Khora", "everything",
  "Teddy", "salmon",
  "Waffle", "pancakes",
  "Banjo", "chicken"
)

# Given dogs name pull info from dog_choice data frame to output a statement referencing their favorite food
# Filter function only keep rows in dog_choice data frame where the value int he dog_name column = the name input in the function
dog_menu <- function(name) {
  my_sub <- filter(dog_choice, dog_name == name)
  print(paste("My name is", my_sub$dog_name, "and my favorite food is", my_sub$food))
}

dog_menu(name = "Waffle")
```

### Functions meet for loops

```{r}
means_over_columns <- function(df) {
  for(i in seq_along(df)) {
    col_mean <- mean(df[[i]], na.rm = TRUE)
    column_name <- colnames(df[i])
    print(paste("The mean value of", column_name, "is", col_mean))
  }
}

means_over_columns(df = mtcars)

means_over_columns(df = faithful)
```

### Nested loop with matrix output

```{r}
apples <- c(1, 2, 3, 4)
price <- c(7, 10, 25)

fruit_out <- matrix(nrow = length(price), ncol = length(apples))

for (i in seq_along(apples)) {
  for (j in seq_along (price)) {
    total_cost <- price[j] * apples[i]
    fruit_out[j, i] <- total_cost
  }
}

fruit_out

# Make up a nested loop 
number_drink <- c(1, 2, 3, 4, 5)
price <- c(10, 5, 8)

drink_price <- matrix(nrow = length(price), ncol = length(number_drink))

for (i in seq_along(number_drink)) {
  for(j in seq_along(price)) {
    drink_cost <- price[j] * number_drink[i]
    drink_price[j, i] <- drink_cost
  }
}
drink_price

# Another example
clothing <- c("shirt", "pants", "shoes")
color <- c("purple", "red", "blue", "white")

our_clothes <- matrix(nrow = length(color), ncol = length(clothing))

for (i in seq_along(clothing)) {
  for (j in seq_along(color)) {
    clothing_details <- paste(color[j], clothing[i])
    our_clothes[j,i] <- clothing_details
  }
}

our_clothes
```

### Logistic growth

Modeling a population over time and varying growth rate

```{r}
my_function <- function(oranges, rainbows) {
  (oranges * rainbows / 2.4)^2
}

# Shortcut on Mac: Cmd + Option + x
# Shotcut on PC: Ctrl + Alt + X
```

```{r}
logistic_growth <- function(K, N0, r, time) {
  K / (1 + ((K - N0)/N0) * exp(-r * time))
}

# Test:
logistic_growth(K = 5000, N0 = 100, r = 0.07, time = 42)
```

```{r}
time_vec <- seq(from = 0, to = 35, by = 0.1)

pop_35 <- logistic_growth(N0 = 40, K = 8000, r = 0.3, time = time_vec)

# vectors need to be the same size to create a data frame
pop_time35_df <- data.frame(time_vec, pop_35)

ggplot(data = pop_time35_df, aes(x = time_vec, y = pop_35)) +
  geom_line(color = "darkorchid") +
  labs( x = "Time", y = "Population", title = "Logistic Growth Over Time") +
  theme_minimal()
```

```{r}
pop_35_vec <- vector(mode = "numeric", length = length(time_vec))

for (i in seq_along(time_vec)) {
  population <- logistic_growth(N0 = 100, K = 6000, r = 0.27, time = time_vec[i])
  pop_35_vec[i] <- population
}

pop_35_vec
```

Now extend this to iterate over multiple growth rates

```{r}
r_seq <- seq(from = 0.20, to = 0.4, by = 0.01)
```

```{r}
out_matrix <- matrix(nrow = length(time_vec), ncol = length(r_seq))

for (i in seq_along(r_seq)) {
  for (j in seq_along(time_vec)) {
    pop <- logistic_growth(N0 = 100, K = 6000, r = r_seq[i], time = time_vec[j])
    out_matrix[j, i] <- pop
  }
}

### Now some wrangling

# Creating data frame and adding column for time
logistic_df <- data.frame(out_matrix, time = time_vec)

# change column names to gr_value of the growth rate and last column name = "time"
colnames(logistic_df) <- c(paste0("gr_", r_seq), "time")

# create long version of output data frame. need a way so that each variable has a single column (i.e growth rate, time, population)
logistic_df_long <- logistic_df |> 
  pivot_longer(cols = -time, values_to = "population", names_to = "growth_rate")

ggplot(data = logistic_df_long, aes(x = time, y = population)) +
  geom_line(aes(color = growth_rate)) + 
  theme_minimal()
```

### A function with warnings and an error message

Use `warning` to add a warning

Use `stop` to add an error.

$$
P=0.3\rho A v^3
$$

rho: air density (kg / m\^3)

A: area covered by the turbine (square meters)

v: wind velocity (m/s)

```{r}
calc_windpower <- function(rho, radius, windspeed) {
  
  if (windspeed > 130) {
    warning("Whoa, that's really fast. Are you sure?")
  }
  
  if(rho > 1.225) {
    warning("That air density is suspicious.")
  }
  
  if(radius < 0) {
    stop("Rotor radius must be a positive value (meters)")
  }
  0.3 * rho * pi * (radius^2) * (windspeed^3)
}

calc_windpower(rho = 1.225, radius = 50, windspeed = 35)
```
